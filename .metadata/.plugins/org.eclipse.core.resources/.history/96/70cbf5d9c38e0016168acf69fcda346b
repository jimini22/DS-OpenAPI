package com.bluedigm.web.batch.sample.scheduler;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersInvalidException;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;
import org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException;
import org.springframework.batch.core.repository.JobRestartException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;


public class MyScheduler {
	private static final Logger logger = LoggerFactory.getLogger(MyScheduler.class);
	
	@Autowired
	private JobLauncher launcher;
	
	@Autowired
	private Job job;
	
	public JobLauncher getLauncher() {
		return launcher;
	}

	public void setLauncher(JobLauncher launcher) {
		this.launcher = launcher;
	}

	public Job getJob() {
		return job;
	}

	public void setJob(Job job) {
		this.job = job;
	}

	public boolean isRunCron() {
		return runCron;
	}

	public void setRunCron(boolean runCron) {
		this.runCron = runCron;
	}

	@Autowired
	private boolean runCron;
	
	private JobExecution execution;
	
	public void runJob(){		
		try {
			execution = launcher.run(job, new JobParameters());
			logger.info("*** Execution status: "+ execution.getStatus());
		} catch (JobExecutionAlreadyRunningException e) {
			e.printStackTrace();
		} catch (JobRestartException e) {			
			e.printStackTrace();
		} catch (JobInstanceAlreadyCompleteException e) {			
			e.printStackTrace();
		} catch (JobParametersInvalidException e) {			
			e.printStackTrace();
		}
	}
}
